From: Tian Yunhao <t123yh@outlook.com>
Date: Sat, 17 Jun 2017 12:04:38 +0800
Subject: Make the HTTP obfuscation work behind an NGINX reverse proxy (#74)

* Make HTTP response be sent immediately after connection.
This will make the plugin work behind an NGINX reverse proxy, preventing any possible timeouts.

* Add Content-Length header.
This field is required for NGINX to work correctly.

* Fix the drop of the first packet.
Store the first packet temporarily to header_buf.

* Pause receiving before sending back the initial response.
---
 src/obfs.h      |   2 +
 src/obfs_http.c |   8 +-
 src/obfs_tls.c  |   2 +
 src/server.c    | 261 ++++++++++++++++++++++++++++++++++----------------------
 4 files changed, 169 insertions(+), 104 deletions(-)

diff --git a/src/obfs.h b/src/obfs.h
index 7cbfad3..d96df6b 100644
--- a/src/obfs.h
+++ b/src/obfs.h
@@ -23,6 +23,7 @@
 #ifndef OBFS_H
 #define OBFS_H
 
+#include <stdbool.h>
 #include "encrypt.h"
 
 #define OBFS_OK         0
@@ -40,6 +41,7 @@ typedef struct obfs_para {
     const char *name;
     const char *host;
     uint16_t port;
+    bool send_empty_response_upon_connection;
 
     int(*const obfs_request)(buffer_t *, size_t, obfs_t *);
     int(*const obfs_response)(buffer_t *, size_t, obfs_t *);
diff --git a/src/obfs_http.c b/src/obfs_http.c
index 84b1ec9..cd1a2d1 100644
--- a/src/obfs_http.c
+++ b/src/obfs_http.c
@@ -38,6 +38,7 @@ static const char *http_request_template =
     "Upgrade: websocket\r\n"
     "Connection: Upgrade\r\n"
     "Sec-WebSocket-Key: %s\r\n"
+    "Content-Length: %lu\r\n"
     "\r\n";
 
 static const char *http_response_template =
@@ -62,6 +63,8 @@ static int next_header(const char **, int *);
 static obfs_para_t obfs_http_st = {
     .name            = "http",
     .port            = 80,
+    .send_empty_response_upon_connection = true,
+
     .obfs_request    = &obfs_http_request,
     .obfs_response   = &obfs_http_response,
     .deobfs_request  = &deobfs_http_header,
@@ -101,7 +104,7 @@ obfs_http_request(buffer_t *buf, size_t cap, obfs_t *obfs)
 
     size_t obfs_len =
         snprintf(http_header, sizeof(http_header), http_request_template,
-                 host_port, major_version, minor_version, b64);
+                 host_port, major_version, minor_version, b64, buf->len);
     size_t buf_len = buf->len;
 
     brealloc(buf, obfs_len + buf_len, cap);
@@ -165,7 +168,8 @@ deobfs_http_header(buffer_t *buf, size_t cap, obfs_t *obfs)
     int len    = buf->len;
     int err    = -1;
 
-    while (len > 4) {
+    // Allow empty content
+    while (len >= 4) {
         if (data[0] == '\r' && data[1] == '\n'
             && data[2] == '\r' && data[3] == '\n') {
             len  -= 4;
diff --git a/src/obfs_tls.c b/src/obfs_tls.c
index 7e1d250..f844330 100644
--- a/src/obfs_tls.c
+++ b/src/obfs_tls.c
@@ -177,6 +177,8 @@ static int is_enable_tls(obfs_t *obfs);
 static obfs_para_t obfs_tls_st = {
     .name            = "tls",
     .port            = 443,
+    .send_empty_response_upon_connection = false,
+
     .obfs_request    = &obfs_tls_request,
     .obfs_response   = &obfs_tls_response,
     .deobfs_request  = &deobfs_tls_request,
diff --git a/src/server.c b/src/server.c
index 9df9bc1..ded73bf 100644
--- a/src/server.c
+++ b/src/server.c
@@ -89,6 +89,7 @@ static void remote_recv_cb(EV_P_ ev_io *w, int revents);
 static void remote_send_cb(EV_P_ ev_io *w, int revents);
 static void server_timeout_cb(EV_P_ ev_timer *watcher, int revents);
 
+static void perform_handshake(EV_P_ server_t *server);
 static remote_t *new_remote(int fd);
 static server_t *new_server(int fd, listen_ctx_t *listener);
 static remote_t *connect_to_remote(EV_P_ struct addrinfo *res,
@@ -393,6 +394,107 @@ connect_to_remote(EV_P_ struct addrinfo *res,
 }
 
 static void
+perform_handshake(EV_P_ server_t *server)
+{
+    // Copy back the saved first packet
+    server->buf->len = server->header_buf->len;
+    server->buf->idx = server->header_buf->idx;
+    memcpy(server->buf->data, server->header_buf->data, server->header_buf->len);
+    server->header_buf->idx = server->header_buf->len = 0;
+
+    int need_query = 0;
+    struct addrinfo info;
+    struct sockaddr_storage storage;
+    memset(&info, 0, sizeof(struct addrinfo));
+    memset(&storage, 0, sizeof(struct sockaddr_storage));
+
+    // Domain name
+    size_t name_len = strlen(server->listen_ctx->dst_addr->host);
+    char *host = server->listen_ctx->dst_addr->host;
+    uint16_t port = htons((uint16_t)atoi(server->listen_ctx->dst_addr->port));
+
+    if (obfs_para == NULL || !obfs_para->is_enable(server->obfs)) {
+        if (server->listen_ctx->failover->host != NULL
+                && server->listen_ctx->failover->port != NULL) {
+            name_len = strlen(server->listen_ctx->failover->host);
+            host = server->listen_ctx->failover->host;
+            port = htons((uint16_t)atoi(server->listen_ctx->failover->port));
+        }
+    }
+
+    struct cork_ip ip;
+    if (cork_ip_init(&ip, host) != -1) {
+        info.ai_socktype = SOCK_STREAM;
+        info.ai_protocol = IPPROTO_TCP;
+        if (ip.version == 4) {
+            struct sockaddr_in *addr = (struct sockaddr_in *)&storage;
+            dns_pton(AF_INET, host, &(addr->sin_addr));
+            addr->sin_port   = port;
+            addr->sin_family = AF_INET;
+            info.ai_family   = AF_INET;
+            info.ai_addrlen  = sizeof(struct sockaddr_in);
+            info.ai_addr     = (struct sockaddr *)addr;
+        } else if (ip.version == 6) {
+            struct sockaddr_in6 *addr = (struct sockaddr_in6 *)&storage;
+            dns_pton(AF_INET6, host, &(addr->sin6_addr));
+            addr->sin6_port   = port;
+            addr->sin6_family = AF_INET6;
+            info.ai_family    = AF_INET6;
+            info.ai_addrlen   = sizeof(struct sockaddr_in6);
+            info.ai_addr      = (struct sockaddr *)addr;
+        }
+    } else {
+        if (!validate_hostname(host, name_len)) {
+            LOGE("invalid host name");
+            close_and_free_server(EV_A_ server);
+            return;
+        }
+        need_query = 1;
+    }
+
+    if (verbose) {
+        LOGI("connect to %s:%d", host, ntohs(port));
+    }
+
+    if (!need_query) {
+        remote_t *remote = connect_to_remote(EV_A_ & info, server);
+
+        if (remote == NULL) {
+            LOGE("connect error");
+            close_and_free_server(EV_A_ server);
+            return;
+        } else {
+            server->remote = remote;
+            remote->server = server;
+
+            // XXX: should handle buffer carefully
+            if (server->buf->len > 0) {
+                memcpy(remote->buf->data, server->buf->data, server->buf->len);
+                remote->buf->len = server->buf->len;
+                remote->buf->idx = 0;
+                server->buf->len = 0;
+                server->buf->idx = 0;
+            }
+
+            // waiting on remote connected event
+            ev_io_start(EV_A_ & remote->send_ctx->io);
+        }
+    } else {
+        query_t *query = ss_malloc(sizeof(query_t));
+        memset(query, 0, sizeof(query_t));
+        query->server = server;
+        snprintf(query->hostname, 256, "%s", host);
+
+        server->stage = STAGE_RESOLVE;
+        server->query = resolv_query(host, server_resolve_cb,
+                                        query_free_cb, query, port);
+
+    }
+
+    return;
+}
+
+static void
 server_recv_cb(EV_P_ ev_io *w, int revents)
 {
     server_ctx_t *server_recv_ctx = (server_ctx_t *)w;
@@ -461,7 +563,49 @@ server_recv_cb(EV_P_ ev_io *w, int revents)
                 obfs_para->disable(server->obfs);
             }
         }
+
         server->stage = STAGE_HANDSHAKE;
+        ev_io_stop(EV_A_ & server->recv_ctx->io);
+
+        // Copy the first packet to the currently unused header_buf.
+        server->header_buf->len = server->buf->len - server->buf->idx;
+        server->header_buf->idx = 0;
+        memcpy(server->header_buf->data, server->buf->data + server->buf->idx, server->header_buf->len);
+        if (obfs_para->send_empty_response_upon_connection) {
+            // Clear the buffer to make an empty packet.
+            server->buf->len = 0;
+
+            if (obfs_para) {
+                obfs_para->obfs_response(server->buf, BUF_SIZE, server->obfs);
+            }
+
+            int s = send(server->fd, server->buf->data, server->buf->len, 0);
+
+            if (s == -1) {
+                if (errno == EAGAIN || errno == EWOULDBLOCK) {
+                    // no data, wait for send
+                    server->buf->idx = 0;
+                    ev_io_start(EV_A_ & server->send_ctx->io);
+                    return;
+                } else {
+                    ERROR("send_inital_response");
+                    close_and_free_remote(EV_A_ remote);
+                    close_and_free_server(EV_A_ server);
+                    return;
+                }
+            } else if (s < server->buf->len) {
+                server->buf->len -= s;
+                server->buf->idx  = s;
+                ev_io_start(EV_A_ & server->send_ctx->io);
+                return;
+            } else {
+                server->buf->len = 0;
+                server->buf->idx = 0;
+            }
+        }
+
+        perform_handshake(EV_A_ server);
+        return;
     } else {
         buf->len = r;
         if (obfs_para) {
@@ -493,101 +637,7 @@ server_recv_cb(EV_P_ ev_io *w, int revents)
         }
         return;
 
-    } else if (server->stage == STAGE_HANDSHAKE) {
-
-        int need_query = 0;
-        struct addrinfo info;
-        struct sockaddr_storage storage;
-        memset(&info, 0, sizeof(struct addrinfo));
-        memset(&storage, 0, sizeof(struct sockaddr_storage));
-
-        // Domain name
-        size_t name_len = strlen(server->listen_ctx->dst_addr->host);
-        char *host = server->listen_ctx->dst_addr->host;
-        uint16_t port = htons((uint16_t)atoi(server->listen_ctx->dst_addr->port));
-
-        if (obfs_para == NULL || !obfs_para->is_enable(server->obfs)) {
-            if (server->listen_ctx->failover->host != NULL
-                    && server->listen_ctx->failover->port != NULL) {
-                name_len = strlen(server->listen_ctx->failover->host);
-                host = server->listen_ctx->failover->host;
-                port = htons((uint16_t)atoi(server->listen_ctx->failover->port));
-            }
-        }
-
-        struct cork_ip ip;
-        if (cork_ip_init(&ip, host) != -1) {
-            info.ai_socktype = SOCK_STREAM;
-            info.ai_protocol = IPPROTO_TCP;
-            if (ip.version == 4) {
-                struct sockaddr_in *addr = (struct sockaddr_in *)&storage;
-                dns_pton(AF_INET, host, &(addr->sin_addr));
-                addr->sin_port   = port;
-                addr->sin_family = AF_INET;
-                info.ai_family   = AF_INET;
-                info.ai_addrlen  = sizeof(struct sockaddr_in);
-                info.ai_addr     = (struct sockaddr *)addr;
-            } else if (ip.version == 6) {
-                struct sockaddr_in6 *addr = (struct sockaddr_in6 *)&storage;
-                dns_pton(AF_INET6, host, &(addr->sin6_addr));
-                addr->sin6_port   = port;
-                addr->sin6_family = AF_INET6;
-                info.ai_family    = AF_INET6;
-                info.ai_addrlen   = sizeof(struct sockaddr_in6);
-                info.ai_addr      = (struct sockaddr *)addr;
-            }
-        } else {
-            if (!validate_hostname(host, name_len)) {
-                LOGE("invalid host name");
-                close_and_free_server(EV_A_ server);
-                return;
-            }
-            need_query = 1;
-        }
-
-        if (verbose) {
-            LOGI("connect to %s:%d", host, ntohs(port));
-        }
-
-        if (!need_query) {
-            remote_t *remote = connect_to_remote(EV_A_ & info, server);
-
-            if (remote == NULL) {
-                LOGE("connect error");
-                close_and_free_server(EV_A_ server);
-                return;
-            } else {
-                server->remote = remote;
-                remote->server = server;
-
-                // XXX: should handle buffer carefully
-                if (server->buf->len > 0) {
-                    memcpy(remote->buf->data, server->buf->data, server->buf->len);
-                    remote->buf->len = server->buf->len;
-                    remote->buf->idx = 0;
-                    server->buf->len = 0;
-                    server->buf->idx = 0;
-                }
-
-                // waiting on remote connected event
-                ev_io_stop(EV_A_ & server_recv_ctx->io);
-                ev_io_start(EV_A_ & remote->send_ctx->io);
-            }
-        } else {
-            query_t *query = ss_malloc(sizeof(query_t));
-            memset(query, 0, sizeof(query_t));
-            query->server = server;
-            snprintf(query->hostname, 256, "%s", host);
-
-            server->stage = STAGE_RESOLVE;
-            server->query = resolv_query(host, server_resolve_cb,
-                                         query_free_cb, query, port);
-
-            ev_io_stop(EV_A_ & server_recv_ctx->io);
-        }
-
-        return;
-    }
+    } 
     // should not reach here
     FATAL("server context error");
 }
@@ -634,14 +684,21 @@ server_send_cb(EV_P_ ev_io *w, int revents)
             server->buf->len = 0;
             server->buf->idx = 0;
             ev_io_stop(EV_A_ & server_send_ctx->io);
-            if (remote != NULL) {
-                ev_io_start(EV_A_ & remote->recv_ctx->io);
-                return;
-            } else {
-                LOGE("invalid remote");
-                close_and_free_remote(EV_A_ remote);
-                close_and_free_server(EV_A_ server);
+
+            // If handshaking
+            if (server->stage == STAGE_HANDSHAKE) {
+                perform_handshake(EV_A_ server);
                 return;
+            } else { // If streaming
+                if (remote != NULL) {
+                    ev_io_start(EV_A_ & remote->recv_ctx->io);
+                    return;
+                } else {
+                    LOGE("invalid remote");
+                    close_and_free_remote(EV_A_ remote);
+                    close_and_free_server(EV_A_ server);
+                    return;
+                }
             }
         }
     }
